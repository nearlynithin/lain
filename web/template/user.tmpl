{{ template "layout.tmpl" .}}
{{define "content"}}
    <main> <div id="divide-2"><div>
    <iconify-icon id="icon-user" icon="healthicons:ui-user-profile" style="color: white;" width="250" height="250">

    </iconify-icon>
      <div id="divide-1"> <div>  <h1 id="NAME-USER">{{.User.Username}}

        </h1> </div>
        <div> {{if and .Session.IsLoggedIn (ne .Session.User.ID .User.ID)}}
        <form action = "/user-follows" method="POST">
            <input type = "hidden" name = "user_id" value = "{{.User.ID}}">

                {{if .User.Following}}
                <input type="hidden" name="_method" value="DELETE">
                {{end}}

                {{if .UserFollowErr}}
                <p>Could not follow user : <code>{{.UserFollowErr}}</code></p>
                {{end}}
            <button id="followerbtn">{{if .User.Following}}Following{{else}}Follow{{end}}</button>
        </form>
        {{end}}</div>
    </div>
</div>

        <div><dl>
           <dt>Following </dt>
            <dd>{{ .User.FollowingCount}}</dd>
        </dl></div>
        <div><dl>
            <dt>Followers </dt>
            <dd>{{ .User.FollowersCount}}</dd>
        </dl></div></div>
        <h3 id="post-count">{{.User.PostsCount}} Posts</h3>
        {{if eq (len .Posts) 0}}
        <p>No posts yet</p>
        {{else}}
       <section >
            {{range .Posts}}
            {{template "post-article.tmpl" .}}
            {{end}}
        </section>
        {{end}}
    </main>
{{end}}

<div id="data-container"></div>
<div class="pagination-container"></div>
<script>
  // Sample user posts data
  const userPosts = [
    { id: 1, title: 'Post 1', body: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.' },
    { id: 2, title: 'Post 2', body: 'Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.' },
    // Add more posts as needed
  ];

  // Items per page
  const itemsPerPage = 2;

  // Function to display user posts for a specific page
  function displayPosts(page) {
    const startIndex = (page - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    const pagePosts = userPosts.slice(startIndex, endIndex);

    const dataContainer = document.getElementById('data-container');
    dataContainer.innerHTML = '';

    pagePosts.forEach(post => {
      const postElement = document.createElement('div');
      postElement.innerHTML = `
        <h3>${post.title}</h3>
        <p>${post.body}</p>
      `;
      dataContainer.appendChild(postElement);
    });
  }

  // Function to generate pagination buttons
  function generatePaginationButtons(totalPages) {
    const paginationContainer = document.querySelector('.pagination-container');
    paginationContainer.innerHTML = '';

    for (let i = 1; i <= totalPages; i++) {
      const button = document.createElement('button');
      button.textContent = i;
      button.classList.add('pagination-button');
      button.addEventListener('click', () => displayPosts(i));
      paginationContainer.appendChild(button);
    }
  }

  // Initialize and display the first page
  displayPosts(1);

  // Calculate the total number of pages
  const totalPages = Math.ceil(userPosts.length / itemsPerPage);

  // Generate pagination buttons
  generatePaginationButtons(totalPages);
</script>
